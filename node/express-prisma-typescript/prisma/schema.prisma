// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username       String  @unique // Unique constraint
  name           String? @db.VarChar(35) // Limit display name to 35 characters
  email          String  @unique // Unique constraint
  password       String
  profilePicture String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts             Post[]
  follows           Follow[]           @relation(name: "follows")
  followers         Follow[]           @relation(name: "followers")
  profileVisibility ProfileVisibility?
  reactions         Reaction[]
  sentMessages      Message[]          @relation(name: "sentMessages")
  UserConversation  UserConversation[]
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  content String

  senderId       String @db.Uuid()
  conversationId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  sender       User         @relation(name: "sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(name: "conversation", fields: [conversationId], references: [id], onDelete: Cascade)
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId    String   @db.Uuid // Foreign Key
  content     String   @db.VarChar(240) // Limit the content to 240 characters
  images      String[]
  relatedPost String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime? // Optional value
  reactions Reaction[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
}

model ProfileVisibility {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId        String @unique @db.Uuid()
  profileTypeId String @db.Uuid()

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type ProfileType @relation(fields: [profileTypeId], references: [id], onDelete: Cascade)
}

model ProfileType {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  type              String              @unique
  ProfileVisibility ProfileVisibility[]
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId         String @db.Uuid()
  reactionTypeId String @db.Uuid()
  postId         String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type ReactionType @relation(fields: [reactionTypeId], references: [id], onDelete: Cascade)
  post Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model ReactionType {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  type     String
  reaction Reaction[]
}

model Conversation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  name String

  picture          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime? // Optional value
  UserConversation UserConversation[]
  messages         Message[]          @relation(name: "conversation")
}

model UserConversation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId         String @db.Uuid()
  conversationId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
